const ls = ['value', '2wfTpTR', 'instantiate', '275341bEPcme', 'innerHTML', '1195047NznhZg', '1qfevql', 'input', '1699808QuoWhA', 'Correct!', 'check_flag', 'Incorrect!', './JIFxzHyW8W', '23SMpAuA', '802698XOMSrr', 'charCodeAt', '474547vVoGDO', 'getElementById', 'instance', 'copy_char', '43591XxcWUl', '504454llVtzW', 'arrayBuffer', '2NIQmVj', 'result'];

// decrease index by 0x1d6 so indexing starts from 0x1d6 instead of 0
const extractor = function(_0x553839, _0x53c021) {
    _0x553839 = _0x553839 - 0x1d6;
    let _0x402c6f = ls[_0x553839];
    return _0x402c6f;
};

(function(_0x76dd13, _0x3dfcae) {
    const extract_from_ls_by_i = extractor;
    while (!![]) {
        try {
            const _0x478583 = -parseInt(extract_from_ls_by_i(0x1eb)) + parseInt(extract_from_ls_by_i(0x1ed)) + -parseInt(extract_from_ls_by_i(0x1db)) * -parseInt(extract_from_ls_by_i(0x1d9)) + -parseInt(extract_from_ls_by_i(0x1e2)) * -parseInt(extract_from_ls_by_i(0x1e3)) + -parseInt(extract_from_ls_by_i(0x1de)) * parseInt(extract_from_ls_by_i(0x1e0)) + parseInt(extract_from_ls_by_i(0x1d8)) * parseInt(extract_from_ls_by_i(0x1ea)) + -parseInt(extract_from_ls_by_i(0x1e5));
            if (_0x478583 === _0x3dfcae)                    // check if ls is done shifting by checking if the sum above is 0x994c3
                break;
            else
                _0x76dd13['push'](_0x76dd13['shift']());    // shifting ls array
        } catch (_0x41d31a) {
            _0x76dd13['push'](_0x76dd13['shift']());
        }
    }
}(ls, 0x994c3));

/*
(function(ls_array, value) {   // (ls, 0x994c3) passed to it
    const extract_from_ls_by_i = extractor;
    while (!![]) {
        try {   // values below are replaced based on the last iteration before the loop breaks
            const total = 
            -parseInt('802698XOMSrr') + 
            parseInt('474547vVoGDO') + 
            -parseInt('2NIQmVj') * -parseInt('504454llVtzW') + 
            -parseInt('1195047NznhZg') * -parseInt('1qfevql') + 
            -parseInt('2wfTpTR') * parseInt('275341bEPcme') + 
            parseInt('43591XxcWUl') * parseInt('23SMpAuA') + 
            -parseInt('1699808QuoWhA');
            
            if (total === value)    // true for this substitution since it is based on the last iteration
                break;
            else
                ls_array['push'](ls_array['shift']());
        } catch (e) {
            ls_array['push'](ls_array['shift']());
        }
    }
}(ls, 0x994c3));
*/

let exports;
(async () => {
    const extract_from_ls_by_i = extractor;
    let _0x5f0229 = await fetch(extract_from_ls_by_i(0x1e9))
      , _0x1d99e9 = await WebAssembly[extract_from_ls_by_i(0x1df)](await _0x5f0229[extract_from_ls_by_i(0x1da)]())
      , _0x1f8628 = _0x1d99e9[extract_from_ls_by_i(0x1d6)];
    exports = _0x1f8628['exports'];
}
)();

/*
(
async () => {
	const extract_from_ls_by_i = extractor;
    let _0x5f0229 = await fetch('./JIFxzHyW8W')
      , _0x1d99e9 = await WebAssembly['instantiate'](await _0x5f0229['arrayBuffer']())
      , _0x1f8628 = _0x1d99e9['instance'];
    exports = _0x1f8628['exports'];
}
)();
*/

// check flag
function onButtonPress() {
    const extract_from_ls_by_i = extractor;
    let _0x3761f8 = document['getElementById'](extract_from_ls_by_i(0x1e4))[extract_from_ls_by_i(0x1dd)];
    for (let _0x16c626 = 0x0; _0x16c626 < _0x3761f8['length']; _0x16c626++) {
        exports[extract_from_ls_by_i(0x1d7)](_0x3761f8[extract_from_ls_by_i(0x1ec)](_0x16c626), _0x16c626);
    }
    exports['copy_char'](0x0, _0x3761f8['length']),
    exports[extract_from_ls_by_i(0x1e7)]() == 0x1 ? document[extract_from_ls_by_i(0x1ee)](extract_from_ls_by_i(0x1dc))[extract_from_ls_by_i(0x1e1)] = extract_from_ls_by_i(0x1e6) : document[extract_from_ls_by_i(0x1ee)](extract_from_ls_by_i(0x1dc))[extract_from_ls_by_i(0x1e1)] = extract_from_ls_by_i(0x1e8);
}

/*
function onButtonPress() {
	const extract_from_ls_by_i = extractor;
	let user_input = document['getElementById']('input')['value'];
	for (let i = 0x0; i < user_input['length']; i++) {
		exports['copy_char'](user_input['charCodeAt'](i), i);
	}
    
    // copies input into WebAssembly memory and checks if flag is correct
	exports['copy_char'](0x0, user_input['length']),
	exports['check_flag']() == 0x1 ? document['getElementById']('result')['innerHTML'] = 'Correct!' : document['getElementById']('result')['innerHTML'] = 'Incorrect!';
}
*/